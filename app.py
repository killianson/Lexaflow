import streamlit as st
import openai
from dotenv import load_dotenv
import os
import pandas as pd
from datetime import datetime
import json

# Configuration de la page (doit √™tre la premi√®re commande Streamlit)
st.set_page_config(
    page_title="Lexaflow - G√©n√©rateur de Descriptions Produits",
    page_icon="‚ú®",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# V√©rification de l'authentification
if 'authenticated' not in st.session_state or not st.session_state.authenticated:
    st.warning("Veuillez vous connecter pour acc√©der √† l'application.")
    st.switch_page("pages/login.py")

# Configuration de la cl√© API OpenAI (gestion local/production)
try:
    # Essayer d'abord les secrets Streamlit (production)
    openai.api_key = st.secrets["OPENAI_API_KEY"]
except:
    # Si √©chec, utiliser le fichier .env (d√©veloppement local)
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")

# Ajout du JavaScript personnalis√© pour la copie
st.markdown("""
    <script>
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(function() {
            console.log('Texte copi√© avec succ√®s');
        }).catch(function(err) {
            console.error('Erreur lors de la copie: ', err);
        });
    }
    </script>
""", unsafe_allow_html=True)

# Titre et description
st.title("‚ú® Lexaflow")
st.markdown("""
    ### G√©n√©rateur intelligent de descriptions produits
    Cr√©ez des descriptions de produits optimis√©es SEO en quelques clics.
""")

# Bouton de d√©connexion
if st.button("Se d√©connecter"):
    st.session_state.authenticated = False
    st.switch_page("pages/login.py")

def log_feedback(product_name, description, is_satisfied, feedback_text):
    try:
        # Cr√©ation du dossier data s'il n'existe pas
        if not os.path.exists('data'):
            os.makedirs('data')
            st.write("Dossier data cr√©√©")
        
        # Cr√©ation du fichier CSV s'il n'existe pas
        csv_file = 'data/feedback.csv'
        if not os.path.exists(csv_file):
            df = pd.DataFrame(columns=['timestamp', 'product_name', 'description', 'is_satisfied', 'feedback_text'])
            df.to_csv(csv_file, index=False)
            st.write("Fichier CSV cr√©√©")
        
        # Ajout du nouveau feedback
        new_feedback = pd.DataFrame({
            'timestamp': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            'product_name': [product_name],
            'description': [description],
            'is_satisfied': [is_satisfied],
            'feedback_text': [feedback_text]
        })
        
        new_feedback.to_csv(csv_file, mode='a', header=False, index=False)
        st.write("Feedback enregistr√© avec succ√®s")
        return True
    except Exception as e:
        st.error(f"Erreur lors de l'enregistrement du feedback : {str(e)}")
        return False

def generate_product_description(product_name, category, audience, tone, features, keywords):
    # Construction du prompt
    prompt = f"""En tant qu'expert en r√©daction e-commerce, cr√©ez une description de produit optimis√©e SEO pour le produit suivant :

Nom du produit : {product_name}
Cat√©gorie : {category}
Public cible : {', '.join(audience)}
Ton souhait√© : {tone}

Caract√©ristiques principales :
{features}

Mots-cl√©s SEO √† int√©grer : {keywords}

La description doit :
1. √ätre engageante et persuasive
2. Int√©grer naturellement les mots-cl√©s SEO
3. Mettre en avant les caract√©ristiques principales
4. Adapter le ton au public cible
5. √ätre optimis√©e pour le r√©f√©rencement naturel
6. √ätre structur√©e avec des paragraphes courts et des puces pour les caract√©ristiques cl√©s

Format de sortie souhait√© :
- Un titre accrocheur
- Une description principale en 2-3 paragraphes
- Une liste de caract√©ristiques cl√©s en puces
- Un appel √† l'action final"""

    try:
        # Appel √† l'API OpenAI avec l'ancienne syntaxe
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Vous √™tes un expert en r√©daction e-commerce sp√©cialis√© dans la cr√©ation de descriptions de produits optimis√©es SEO."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Une erreur est survenue lors de la g√©n√©ration : {str(e)}")
        return None

# Formulaire principal
with st.form("product_description_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        product_name = st.text_input("Nom du produit")
        product_category = st.selectbox(
            "Cat√©gorie du produit",
            ["Mode", "D√©coration", "High-tech", "Alimentation", "Autre"]
        )
        target_audience = st.multiselect(
            "Public cible",
            ["Particuliers", "Professionnels", "Enfants", "Adolescents", "Seniors"]
        )
    
    with col2:
        brand_tone = st.selectbox(
            "Ton de marque",
            ["Professionnel", "D√©contract√©", "Luxe", "√âcologique", "Technique"]
        )
        key_features = st.text_area(
            "Caract√©ristiques principales",
            placeholder="Listez les caract√©ristiques principales du produit, une par ligne"
        )
        keywords = st.text_input(
            "Mots-cl√©s SEO",
            placeholder="S√©parez les mots-cl√©s par des virgules"
        )
    
    submitted = st.form_submit_button("G√©n√©rer la description")

# Affichage du r√©sultat
if submitted:
    if not product_name:
        st.error("Veuillez entrer le nom du produit.")
    else:
        with st.spinner("G√©n√©ration de la description en cours..."):
            description = generate_product_description(
                product_name,
                product_category,
                target_audience,
                brand_tone,
                key_features,
                keywords
            )
            
            if description:
                st.success("Description g√©n√©r√©e avec succ√®s!")
                # Stockage de la description dans la session state
                st.session_state['current_description'] = description
                st.session_state['current_product_name'] = product_name
                st.session_state['show_feedback'] = True

# Affichage de la description actuelle si elle existe
if 'current_description' in st.session_state:
    st.markdown("### Description g√©n√©r√©e")
    st.code(st.session_state['current_description'], language=None)

# Formulaire de retour (s√©par√© du formulaire principal)
if 'show_feedback' in st.session_state and st.session_state['show_feedback']:
    st.markdown("---")
    st.markdown("### Votre avis nous int√©resse")
    with st.form("feedback_form"):
        satisfaction = st.radio(
            "Ce texte vous a-t-il satisfait ?",
            ["üëç Oui", "üëé Non"],
            horizontal=True
        )
        
        feedback_text = st.text_area(
            "Votre commentaire (optionnel)",
            placeholder="Dites-nous ce que vous pensez de cette description, ce qui vous a plu ou ce qui pourrait √™tre am√©lior√©."
        )
        
        feedback_submitted = st.form_submit_button("Envoyer le retour")
        
        if feedback_submitted:
            is_satisfied = satisfaction == "üëç Oui"
            if log_feedback(
                st.session_state['current_product_name'],
                st.session_state['current_description'],
                is_satisfied,
                feedback_text
            ):
                st.success("Merci pour votre retour !")
                # On ne supprime plus la description, on cache juste le formulaire de feedback
                st.session_state['show_feedback'] = False 